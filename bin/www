#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('WebtechWebshopD01:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);



//ADD SOCKET SERVER

var io = require('socket.io')(server);

//ADD MODALS

var user = require('../models/user');
var Product = require('../models/product');
var cart = require('../models/cart');
var orders = require('../models/orders');





//SOCKETS



io.on('connection', function(socket){

console.log('user connected');
  
  // socket.on('disconnect', function(){

  //   console.log('user disconnected');

  // });

  socket.on('findProductData', function(data) {

    Product.findById(data, function(err, result){
          
          console.log(result.price);
          socket.emit('showProductData', result);

      });
  });

  socket.on("addProduct", function(data){

    Product.create(data, function(err, b){

    
    });

  });

  socket.on("addCart", function(data){

    cart.create({quantity: data.quantity, productId: data.productId, usercartId: data.usercartId}, function(err, b){

    
    });

  });

  //Find products in DB

  socket.on('findProducts', function(data) {

    results.find()
      .exec(function(err, results){
          socket.emit('showProducts', results);

      });

  });

  


  //Find products in cart in DB

//   socket.on('findCartProducts', function(data) {

//     results.find()
//       .exec(function(err, results){
//           socket.emit('showCartProducts', results);

//       });

//   });

});




//  

io.on('connect', function(socket) {
    Product.find()
      .exec(function(err, products) {
        socket.emit('showProducts', products);
      });
  });

io.on('connect', function(socket) {
    cart.find()
      .exec(function(err, carts) {
        socket.emit('showCartProducts', carts);
      });
  });









/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
